CSS知识扩展：
    CSS 引擎查找样式表，对每条规则都按从右到左的顺序去匹配,可以减少开销，比如找到某个li元素时
    会ul li遍历ul导致开销变大，所以通配符*的开销是十分大的。
css优化手段
    1.基于 渲染流程 的css优化手段
    - 避免使用通配符，只对需要用到的元素进行选择。
    - 关注可以通过继承实现的属性，避免重复匹配重复定义。
    - 少用标签选择器。如果可以，用类选择器替代
    - 不要画蛇添足，id 和 class 选择器不应该被多余的标签选择器拖后腿
    - 减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层）


JS知识点：
    JS 引擎是独立于渲染引擎存在的，我们的 JS 代码在文档的何处插入，就在何处执行。
    与其说是 JS 把 CSS 和 HTML 阻塞了，不如说是 JS 引擎抢走了渲染引擎的控制权。之所以浏览器会让js阻塞其它活动，
    是因为它不知道js要做什么样的改变，但我们知道，所以我们可以通过它使用defer和async来避免不必要的阻塞。

js的三种加载方式
    1.正产模式
    <script src="index.js"></script>
    这种情况下js会阻塞浏览器，需等到加载完index.js之后才会做其它事情
    2.async模式
    <script async src="index.js"></script>
    async模式下，js不会阻塞浏览器，可以做任意事情，index.js的加载是异步的，当它加载结束会 立即执行
    3.defer模式
    <script defer src="index.js"></script>
    defer模式下，js的加载是异步的，但是是 推迟执行 ，等整个文档加载完成，DOMContentLoaded 事件即将被触发时，
    被标记了 defer 的 JS 文件才会开始依次执行。

小结：一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；
当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。


DOM优化原理和基本实践：